#!groovy
def execNode = 'common-runner'
def registry = '561108432312.dkr.ecr.ap-southeast-1.amazonaws.com/deeper-chain/new-explorer'
def dockerTag = 'prod'
def deployCmd = 'kubectl rollout restart --namespace=deeper-chain deployment/deeper-chain-new-explorer'
def deployCmdForTopster = 'echo "No topster app for production yet"'

if (env.BRANCH_NAME == 'dev') {
    dockerTag = 'dev'
    deployCmd = 'kubectl rollout restart deployment/deeper-chain-new-explorer -n dev'
    deployCmdForTopster = 'kubectl rollout restart deployment/topster-chain-new-explorer -n dev'
}

def upstreamProjects = ''

pipeline {
    agent {
        node { label execNode }
    }

    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '3'))
    }

    triggers {
        upstream(
            upstreamProjects: upstreamProjects,
            threshold: hudson.model.Result.SUCCESS
        )
    }
    environment {
        webhook_key = credentials('webhook_key')
        //DOCKER_BUILDKIT = "1"
        TARGET_DOCKER_IMAGE = "${registry}:${dockerTag}"
        DEPLOY_CMD = "${deployCmd}"
    }

    stages {
        stage('test') {
            when {
                not {
                    anyOf {
                        branch 'master'
                        branch 'dev'
                    }
                }
            }
            stages {
                stage('Unit Test') {
                    steps {
                        echo 'prepare to code test'
                    //TODO
                    }
                }
                stage('report') {
                    when {
                        not {
                            branch 'PR-*'
                        }
                    }
                    steps {
                        echo 'generate code report'
                    //TODO
                    }
                }
            }
        }

        stage('Build image') {
            when {
                anyOf {
                    branch 'master'
                    branch 'dev'
                }
            }
            steps {
                sh 'docker pull $TARGET_DOCKER_IMAGE || true'
                sh 'docker build -f docker/Dockerfile -t $TARGET_DOCKER_IMAGE .'
            }
        }
        stage('push image') {
            when {
                anyOf {
                    branch 'master'
                    branch 'dev'
                }
            }
            steps {
                sh 'docker push $TARGET_DOCKER_IMAGE'
            }
        }
        stage('Deploy code') {
            when {
                anyOf {
                    branch 'master'
                    branch 'deploy'
                    branch 'dev'
                }
            }
            steps {
                sh '$DEPLOY_CMD'
                sh "${deployCmdForTopster}"
            }
        }
    }
    post {
        fixed {
            script {
                    sh(script: 'bash jenkins/post.sh fixed')
            }
        }
        regression {
            script {
                    sh(script: 'bash jenkins/post.sh regression')
            }
        }
    }
}
