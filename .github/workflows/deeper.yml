name: Deeper Actions

on:
  push:
    branches: ["dev"]
permissions:
  id-token: write
  contents: read
env:
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
jobs:
  collect:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.common.outputs.env }}
      branch: ${{ steps.common.outputs.branch }}
      slack_ts: ${{ steps.slack.outputs.ts }}
      describe: ${{ steps.common.outputs.describe }}
      docker_tag: ${{ steps.common.outputs.docker_tag }}
      github_action_url: ${{ steps.common.outputs.github_action_url }}
      commit_uri: ${{ steps.common.outputs.commit_uri }}
      commit_message: ${{ steps.common.outputs.commit_message }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract variables
        run: |
          GIT_DESCRIBE=$(git describe --tags --always --dirty)
          echo "describe=$GIT_DESCRIBE" >> $GITHUB_OUTPUT
          echo "github_action_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_OUTPUT
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          echo "commit_uri=${{ github.repository_owner }}/${{ github.event.repository.name }}/$BRANCH_NAME/$GIT_DESCRIBE" >> $GITHUB_OUTPUT
          echo "commit_message=Commint message \`${{ github.event.commits[0].message }}\` by ${{ github.event.commits[0].author.name }}" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "env=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "docker_tag=$BRANCH_NAME" >> $GITHUB_OUTPUT
        id: common
      - id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "text": "Deploying ${{ steps.common.outputs.commit_uri }}",
              "color": "dbab09",
              "attachments": [
                {
                  "color": "dbab09",
                  "pretext": "${{ steps.common.outputs.commit_message }}",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "In progress"
                    }
                  ]
                }
              ]
            }
      - uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "thread_ts": "${{ steps.slack.outputs.ts }}",
              "text": "Basic information",
              "attachments": [
                {
                  "color": "28a745",
                  "fields": [
                    {
                      "title": "commit URL",
                      "value": "${{ github.event.commits[0].url }}"
                    },
                    {
                      "title": "compare URL",
                      "value": "${{ github.event.compare }}"
                    },
                    {
                      "title": "Actions URL",
                      "value": "${{ steps.common.outputs.github_action_url }}"
                    }
                  ]
                }
              ]
            }
  build:
    runs-on: ubuntu-latest
    outputs:
      has_version_file: ${{ steps.write-version.outputs.has_version_file }}
      docker_image: ${{ steps.docker.outputs.docker_image }}
    needs:
      - collect
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "thread_ts": "${{ needs.collect.outputs.slack_ts }}",
              "text": "Building docker image..."
            }
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: ${{ inputs.checkout_submodules }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
      - name: Check out other repo 1
        uses: actions/checkout@v4
        if: ${{ inputs.other_repo_1 != '' && inputs.other_repo_1_path != '' }}
        with:
          repository: ${{ inputs.other_repo_1 }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
          path: ${{ inputs.other_repo_1_path }}
      - name: write git version
        shell: bash
        id: write-version
        run: |
          if [ -d "./public" ]; then
            echo "${{ needs.collect.outputs.describe }}" > public/VERSION.txt
            echo "version_file=public/VERSION.txt"
            echo "has_version_file=true" >> $GITHUB_OUTPUT
          fi
          if [ -d "./app/public" ]; then
            echo "${{ needs.collect.outputs.describe }}" > app/public/VERSION.txt
            echo "version_file=app/public/VERSION.txt"
            echo "has_version_file=true" >> $GITHUB_OUTPUT
          fi
          if [ -d "./frontend/public" ]; then
            echo "${{ needs.collect.outputs.describe }}" > frontend/public/VERSION.txt
            echo "version_file=frontend/public/VERSION.txt"
            echo "has_version_file=true" >> $GITHUB_OUTPUT
          fi
          find . -type f -exec sed -i "s/__APP_VERSION__/${{ needs.collect.outputs.describe }}/g" {} +
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: docker image
        id: docker
        run: echo "docker_image=${{ steps.login-ecr.outputs.registry }}/${{ github.repository }}:${{ needs.collect.outputs.docker_tag }}" >> $GITHUB_OUTPUT
      - name: before build
        if: ${{ inputs.before_build_script != '' }}
        run: ${{ inputs.before_build_script }}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.docker.outputs.docker_image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: docker/Dockerfile
      - uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "thread_ts": "${{ needs.collect.outputs.slack_ts }}",
              "text": "Build finished (Completed)",
              "attachments": [
                {
                  "color": "28a745",
                  "fields": [
                    {
                      "title": "Image",
                      "value": "${{ steps.docker.outputs.docker_image }}"
                    }
                  ]
                }
              ]
            }
      - uses: slackapi/slack-github-action@v1.26.0
        if: ${{ failure() }}
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          update-ts: ${{ needs.collect.outputs.slack_ts }}
          payload: |
            {
              "text": "Failed to build ${{ needs.collect.outputs.commit_uri }}",
              "color": "danger",
              "attachments": [
                {
                  "color": "danger",
                  "pretext": "${{ needs.collect.outputs.commit_message }}",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Failed"
                    },
                    {
                      "title": "Result",
                      "value": "${{ needs.collect.outputs.github_action_url }}"
                    }
                  ]
                }
              ]
            }
  deploy:
    runs-on: ubuntu-latest
    outputs:
      domain: ${{ steps.domain.outputs.domain }}
    needs:
      - collect
      - build
    steps:
      - uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "thread_ts": "${{ needs.collect.outputs.slack_ts }}",
              "text": "Deploying new docker image..."
            }
      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.25.12"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: setup k8s config
        run: aws eks update-kubeconfig --name ${{ secrets.AWS_K8S_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} --role-arn ${{ secrets.AWS_K8S_ROLE_ARN }}
      - name: set output namespace
        id: namespace
        run: |
          NAMESPACE=${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ needs.collect.outputs.env }}
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
      - name: set output domain
        id: domain
        continue-on-error: true
        run: echo "domain=$(kubectl get ingress -n ${{ steps.namespace.outputs.namespace }} -o jsonpath='{.items[0].spec.rules[0].host}')" >> $GITHUB_OUTPUT
      - name: Notify by slack when set domain failed
        if: steps.domain.outputs.domain == ''
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "thread_ts": "${{ needs.collect.outputs.slack_ts }}",
              "text": "There is no domain found for ${{ github.event.repository.name }} in ${{ steps.namespace.outputs.namespace }}"
            }
      - uses: slackapi/slack-github-action@v1.26.0
        if: steps.domain.outputs.domain != ''
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "thread_ts": "${{ needs.collect.outputs.slack_ts }}",
              "text": "Restarting K8S deployment..."
            }
      - uses: slackapi/slack-github-action@v1.26.0
        if: steps.domain.outputs.domain != '' && needs.build.outputs.has_version_file == 'true'
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "thread_ts": "${{ needs.collect.outputs.slack_ts }}",
              "text": "Current version: (${{ needs.collect.outputs.describe }}) https://${{ steps.domain.outputs.domain }}/VERSION.txt"
            }
      - name: deploy
        id: deploy
        if: steps.domain.outputs.domain != ''
        run: kubectl rollout restart deployment/${{ github.event.repository.name }} -n ${{ steps.namespace.outputs.namespace }}

      - name: notify slack if deploy failed
        if: steps.deploy.outcome == 'failure'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "thread_ts": "${{ needs.collect.outputs.slack_ts }}",
              "text": "There is no deployment found for ${{ github.event.repository.name }} in ${{ steps.namespace.outputs.namespace }}"
            }

      - name: Verify if deploy success
        if: steps.domain.outputs.domain != ''
        run: kubectl rollout status deployment/${{ github.event.repository.name }} -n ${{ steps.namespace.outputs.namespace }} --timeout=5m

      - uses: slackapi/slack-github-action@v1.26.0
        if: steps.domain.outputs.domain != ''
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload: |
            {
              "thread_ts": "${{ needs.collect.outputs.slack_ts }}",
              "text": "Deploy finished (Completed)",
              "attachments": [
                {
                  "color": "28a745",
                  "fields": [
                    {
                      "title": "URL",
                      "short": true,
                      "value": "https://${{ steps.domain.outputs.domain }}"
                    }
                  ]
                }
              ]
            }

      - name: deploy by ssh
        env:
          DEPLOY_SCRIPT: ${{ inputs.deploy_script || secrets.DEPLOY_SCRIPT }}
        if: env.DEPLOY_SCRIPT != ''
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "$DEPLOY_SCRIPT" > /tmp/deploy.sh
          bash /tmp/deploy.sh
          echo "Deployed by ssh"

      - uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          update-ts: ${{ needs.collect.outputs.slack_ts }}
          payload: |
            {
              "text": "Deployed ${{ needs.collect.outputs.commit_uri }}",
              "attachments": [
                {
                  "color": "28a745",
                   "pretext": "${{ needs.collect.outputs.commit_message }}",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Finished"
                    }
                  ]
                }
              ]
            }
      - uses: slackapi/slack-github-action@v1.26.0
        if: ${{ failure() }}
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          update-ts: ${{ needs.collect.outputs.slack_ts }}
          payload: |
            {
              "text": "Failed to deploy ${{ needs.collect.outputs.commit_uri }}",
              "color": "danger",
              "attachments": [
                {
                  "color": "danger",
                  "pretext": "${{ needs.collect.outputs.commit_message }}",
                  "fields": [
                    {
                      "title": "Status",
                      "short": true,
                      "value": "Failed"
                    },
                    {
                      "title": "Result",
                      "value": "${{ needs.collect.outputs.github_action_url }}"
                    }
                  ]
                }
              ]
            }
